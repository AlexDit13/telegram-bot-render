import os
from dotenv import load_dotenv
import telebot
from flask import Flask, request
import json
load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN') or "7892124873:AAF7AnvpEPg5OdDv4MxC1i8G0vCVGbFSjIo"
print("–¢–æ–∫–µ–Ω:", TOKEN)
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)
products = {
    "—è–±–ª–æ–∫–æ": 52,
    "–∫—É—Ä–∏—Ü–∞": 165,
    "—à–æ–∫–æ–ª–∞–¥": 546
}
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        try:
            json_data = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json.loads(json_data))
            bot.process_new_updates([update])
            return 'OK', 200
        except Exception as e:
            print(f"Webhook error: {e}")
            return 'Error', 400
    return 'Method not allowed', 405
# ======== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ========

@bot.message_handler(commands=['start', 'help'])
def send_commands(message):
    if message.text == '/start':
        bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫! üöÄ")
    else:
        bot.send_message(message.chat.id, 
"""–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
/help - –°–ø—Ä–∞–≤–∫–∞
/calc - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π""")
@bot.message_handler(func=lambda m: True)
def handle_all_messages(message):
    if message.text in products:
        msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å {message.text} –≤ –≥—Ä–∞–º–º–∞—Ö:")
        bot.register_next_step_handler(msg, lambda m: calculate(m, message.text))
    else:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ /help")

# ======== –§–£–ù–ö–¶–ò–û–ù–ê–õ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê –ö–ê–õ–û–†–ò–ô ========


@bot.message_handler(commands=['calc'])
def calculate_calories(message):
    markup = telebot.types.ReplyKeyboardMarkup(row_width=2)
    for product in products:
        markup.add(product)
    msg = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:", reply_markup=markup)
    bot.register_next_step_handler(msg, process_product_choice)

def process_product_choice(message):
    product = message.text.lower()
    if product not in products:
        bot.send_message(message.chat.id, "–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    msg = bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å {product} –≤ –≥—Ä–∞–º–º–∞—Ö:")
    bot.register_next_step_handler(msg, lambda m: calculate(m, product))

def calculate(message, product):
    try:
        grams = int(message.text)
        calories = (products[product] * grams) // 100
        bot.send_message(
            message.chat.id,
            f"üçè {grams}–≥ {product} = {calories} –∫–∫–∞–ª",
            reply_markup=telebot.types.ReplyKeyboardRemove()
        )
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

# ======== –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –ß–ê–°–¢–¨ –î–õ–Ø RENDER ========

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram"

if __name__ == '__main__':
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
    bot.remove_webhook()
    try:
        bot.set_webhook(
            url='https://telegram-bot-render-h7b5.onrender.com/webhook'
        )
        print("–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))