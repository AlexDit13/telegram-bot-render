import os
from dotenv import load_dotenv
import telebot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from flask import Flask, request
from collections import defaultdict
import json
import matplotlib.pyplot as plt
from io import BytesIO
from datetime import datetime, timedelta
import time
def back_to_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup
load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN') or "7892124873:AAF7AnvpEPg5OdDv4MxC1i8G0vCVGbFSjIo"
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

PRODUCTS_FILE = "products.json"
USER_DATA_FILE = "user_data.json"
def load_data():
    if os.path.exists(PRODUCTS_FILE):
        with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
            products = json.load(f)
    else:
        products = {"—è–±–ª–æ–∫–æ": 52, "–∫—É—Ä–∏—Ü–∞": 165, "—à–æ–∫–æ–ª–∞–¥": 546}

    if os.path.exists(USER_DATA_FILE):
        with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            user_data = defaultdict(
                lambda: {"total": 0, "history": []},
                {k: v if isinstance(v, dict) else {"total": v, "history": []} for k, v in data.items()}
            )
    else:
        user_data = defaultdict(lambda: {"total": 0, "history": []})
    
    return products, user_data
def save_data():
    with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
        json.dump(products, f, ensure_ascii=False, indent=2)
    with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(dict(user_data), f, ensure_ascii=False, indent=2)

products, user_data = load_data()
def generate_week_plot(user_id):
    user_stats = user_data.get(str(user_id), {})
    history = user_stats.get("history", [])
    daily_calories = {}
    
    for entry in history:
        date = entry["date"]
        daily_calories[date] = daily_calories.get(date, 0) + entry["calories"]
    
    if not daily_calories:
        return None
    
    dates = sorted(daily_calories.keys())
    calories = [daily_calories[date] for date in dates]
    
    plt.switch_backend('Agg')
    plt.figure(figsize=(10, 5))
    plt.plot(dates, calories, marker='o', linestyle='-', color='teal')
    plt.title("–ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
    plt.xlabel("–î–∞—Ç–∞")
    plt.ylabel("–ö–∫–∞–ª")
    plt.grid(True)
    plt.tight_layout()
    
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=80)
    buffer.seek(0)
    plt.close()
    return buffer
def generate_pie_chart(user_id):
    user_stats = user_data.get(str(user_id), {})
    history = user_stats.get("history", [])
    
    if not history:
        return None
    
    product_calories = {}
    for entry in history:
        product = entry["product"]
        product_calories[product] = product_calories.get(product, 0) + entry["calories"]
    
    if not product_calories:
        return None
    
    plt.switch_backend('Agg')
    plt.figure(figsize=(8, 8))
    plt.pie(
        product_calories.values(),
        labels=product_calories.keys(),
        autopct='%1.1f%%',
        startangle=90
    )
    plt.title("–¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
    
    buffer = BytesIO()
    plt.savefig(buffer, format='png', dpi=80)
    buffer.seek(0)
    plt.close()
    return buffer
def create_keyboard():
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = list(products.keys())
    markup.add(*buttons)
    markup.row("üìä –ò—Ç–æ–≥", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
    markup.row("üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", "ü•ß –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    markup.row("üìú –ò—Å—Ç–æ—Ä–∏—è")
    markup.row("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùì –ü–æ–º–æ—â—å")
    return markup
@bot.message_handler(commands=['start', '–º–µ–Ω—é', '–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
def start(message):
    user_data[str(message.chat.id)] = {"total": 0, "history": []}
    bot.send_message(
        message.chat.id,    
        "üçé –ë–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π:",
        reply_markup=create_keyboard()
    )
@bot.message_handler(func=lambda m: m.text in products.keys())
def add_product(message):
    product = message.text
    if product in products:
        msg = bot.send_message(
            message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product}' –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=back_to_menu_keyboard()
        )
        bot.register_next_step_handler(msg, lambda m: process_product_amount(m, product))
def process_product_amount(message, product):
    try:
        amount = int(message.text)
        calories = int(products[product] * amount / 100)
        user_id = str(message.chat.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data[user_id]["total"] += calories
        user_data[user_id]["history"].append({
            "product": product,
            "amount": amount,
            "calories": calories,
            "date": datetime.now().strftime("%Y-%m-%d")
        })
        save_data()
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product} - {amount}–≥ ({calories} –∫–∫–∞–ª)\n"
            f"–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {user_data[user_id]['total']} –∫–∫–∞–ª",
            reply_markup=create_keyboard()
        )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!",
            reply_markup=create_keyboard()
        )
@bot.message_handler(func=lambda m: m.text == "üìä –ò—Ç–æ–≥")
def show_total(message):
    user_id = str(message.chat.id)
    total = user_data[user_id]["total"]
    bot.send_message(
        message.chat.id,
        f"üìä –í—Å–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {total} –∫–∫–∞–ª",
        reply_markup=create_keyboard()
    )
@bot.message_handler(func=lambda m: m.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
def reset_counter(message):
    user_id = str(message.chat.id)
    user_data[user_id]["total"] = 0
    user_data[user_id]["history"] = []
    save_data()
    bot.send_message(
        message.chat.id,
        "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!",
        reply_markup=create_keyboard()
    )
@bot.message_handler(func=lambda m: m.text == "üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é")
def send_week_plot(message):
    plot = generate_week_plot(message.chat.id)
    if plot:
        bot.send_photo(
            message.chat.id,
            plot,
            caption="üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
            reply_markup=create_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=create_keyboard()
        )
@bot.message_handler(func=lambda m: m.text == "ü•ß –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
def send_pie_chart(message):
    chart = generate_pie_chart(message.chat.id)
    if chart:
        bot.send_photo(
            message.chat.id,
            chart,
            caption="ü•ß –¢–æ–ø –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            reply_markup=create_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
            reply_markup=create_keyboard()
        )
def confirm_replace(message, name, kcal):
    if message.text.lower() == "–¥–∞":
        products[name] = kcal
        save_data()
        bot.send_message(
            message.chat.id,
            f"‚úÖ '{name}' –æ–±–Ω–æ–≤–ª—ë–Ω! –ù–æ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {kcal} –∫–∫–∞–ª/100–≥",
            reply_markup=create_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
            reply_markup=create_keyboard()
        )

def process_add_product(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    if message.text.lower() in ["–º–µ–Ω—é", "–Ω–∞–∑–∞–¥"]:
        return start(message)
    try:
        name, kcal = message.text.split(":")
        name = name.strip().lower()
        kcal = int(kcal.strip())
        if name in products:
            confirm_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            confirm_markup.add("–î–∞", "–ù–µ—Ç", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç '{name}' —É–∂–µ –µ—Å—Ç—å!\n"
                f"–¢–µ–∫—É—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {products[name]} –∫–∫–∞–ª\n"
                "–ó–∞–º–µ–Ω–∏—Ç—å? (–î–∞/–ù–µ—Ç)",
                reply_markup=confirm_markup
            )
            bot.register_next_step_handler(msg, lambda m: confirm_replace(m, name, kcal))
        else:
            products[name] = kcal
            save_data()
            bot.send_message(
                message.chat.id,
                f"‚úÖ '{name}' ({kcal} –∫–∫–∞–ª/100–≥) –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=create_keyboard()
        )
    except Exception as e:
        error_markup = create_keyboard()
        error_markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
        bot.send_message(
            message.chat.id,
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
            reply_markup=error_markup
        )
@app.route('/webhook', methods=['POST'])
def webhook():
    if request.method == "POST":
        try:
            json_data = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json.loads(json_data))
            bot.process_new_updates([update])
            return 'OK', 200
        except Exception as e:
            print(f"Webhook error: {e}")
            return 'Error', 400
    return 'Method not allowed', 405
@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram"

if __name__ == '__main__':
    print("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫...")
    bot.remove_webhook()
    time.sleep(1)
    try:
        bot.set_webhook(
            url='https://telegram-bot-render-h7b5.onrender.com/webhook'
        )
        print("–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))