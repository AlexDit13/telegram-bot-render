import logging
import os
import json
import time
from datetime import datetime
from collections import defaultdict
from io import BytesIO

import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from dotenv import load_dotenv
import telebot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from flask import Flask, request

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê ====================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

load_dotenv(os.path.join(os.path.dirname(__file__), '.env'))
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# ==================== –î–ê–ù–ù–´–ï ====================
PRODUCTS_FILE = "products.json"
USER_DATA_FILE = "user_data.json"

def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    try:
        if os.path.exists(PRODUCTS_FILE):
            with open(PRODUCTS_FILE, 'r', encoding='utf-8') as f:
                products = json.load(f)
        else:
            products = {"—è–±–ª–æ–∫–æ": 52, "–∫—É—Ä–∏—Ü–∞": 165, "—à–æ–∫–æ–ª–∞–¥": 546}

        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                user_data = defaultdict(
                    lambda: {"total": 0, "history": []},
                    {k: v if isinstance(v, dict) else {"total": v, "history": []} for k, v in data.items()}
                )
        else:
            user_data = defaultdict(lambda: {"total": 0, "history": []})
        
        return products, user_data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"—è–±–ª–æ–∫–æ": 52, "–∫—É—Ä–∏—Ü–∞": 165, "—à–æ–∫–æ–ª–∞–¥": 546}, defaultdict(lambda: {"total": 0, "history": []})

def save_data():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª—ã"""
    try:
        with open(PRODUCTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(products, f, ensure_ascii=False, indent=2)
        with open(USER_DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(dict(user_data), f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

products, user_data = load_data()

# ==================== –ì–†–ê–§–ò–ö–ò ====================
def generate_week_plot(user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        user_stats = user_data.get(str(user_id), {})
        history = user_stats.get("history", [])
        daily_calories = defaultdict(int)
        
        for entry in history:
            date = entry["date"]
            daily_calories[date] += entry["calories"]
        
        if not daily_calories:
            return None
        
        dates = sorted(daily_calories.keys())[-7:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        calories = [daily_calories[date] for date in dates]
        
        plt.figure(figsize=(10, 5))
        plt.plot(dates, calories, marker='o', linestyle='-', color='teal')
        plt.title("–ö–∞–ª–æ—Ä–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
        plt.xlabel("–î–∞—Ç–∞")
        plt.ylabel("–ö–∫–∞–ª")
        plt.grid(True)
        plt.tight_layout()
        
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=80)
        buffer.seek(0)
        plt.close()
        return buffer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

def generate_pie_chart(user_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    try:
        user_stats = user_data.get(str(user_id), {})
        history = user_stats.get("history", [])
        
        if not history:
            return None
        
        product_calories = defaultdict(int)
        for entry in history:
            product_calories[entry["product"]] += entry["calories"]
        
        top_products = dict(sorted(product_calories.items(), key=lambda x: x[1], reverse=True)[:5])
        
        plt.figure(figsize=(8, 8))
        plt.pie(
            top_products.values(),
            labels=top_products.keys(),
            autopct='%1.1f%%',
            startangle=90
        )
        plt.title("–¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞–ª–æ—Ä–∏—è–º")
        
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=80)
        buffer.seek(0)
        plt.close()
        return buffer
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")
        return None

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
def back_to_menu_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

def create_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = list(products.keys())
    markup.add(*buttons)
    markup.row("üìä –ò—Ç–æ–≥", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
    markup.row("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
    markup.row("üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é", "ü•ß –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
    markup.row("üìú –ò—Å—Ç–æ—Ä–∏—è", "‚ùì –ü–æ–º–æ—â—å")
    markup.row("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    return markup

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================
@bot.message_handler(commands=['start', 'help', '–º–µ–Ω—é', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        user_id = str(message.chat.id)
        if user_id not in user_data:
            user_data[user_id] = {"total": 0, "history": []}
            save_data()
        
        bot.send_message(
            message.chat.id,
            "üçé –ë–æ—Ç-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∫–∞–ª–æ—Ä–∏–π\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π:",
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda m: m.text in products.keys())
def add_product(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        product = message.text
        msg = bot.send_message(
            message.chat.id,
            f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product}' –≤ –≥—Ä–∞–º–º–∞—Ö:",
            reply_markup=back_to_menu_keyboard()
        )
        bot.register_next_step_handler(msg, lambda m: process_product_amount(m, product))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_product: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=create_keyboard())

def process_product_amount(message, product):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        amount = int(message.text)
        calories = int(products[product] * amount / 100)
        user_id = str(message.chat.id)
        
        if user_id not in user_data:
            user_data[user_id] = {"total": 0, "history": []}
        
        user_data[user_id]["total"] += calories
        user_data[user_id]["history"].append({
            "product": product,
            "amount": amount,
            "calories": calories,
            "date": datetime.now().strftime("%Y-%m-%d")
        })
        save_data()
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {product} - {amount}–≥ ({calories} –∫–∫–∞–ª)\n"
            f"–í—Å–µ–≥–æ —Å–µ–≥–æ–¥–Ω—è: {user_data[user_id]['total']} –∫–∫–∞–ª",
            reply_markup=create_keyboard()
        )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!",
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_product_amount: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìä –ò—Ç–æ–≥")
def show_total(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π"""
    try:
        user_id = str(message.chat.id)
        total = user_data.get(user_id, {}).get("total", 0)
        bot.send_message(
            message.chat.id,
            f"üìä –í—Å–µ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {total} –∫–∫–∞–ª",
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_total: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
def reset_counter(message):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = str(message.chat.id)
        user_data[user_id] = {"total": 0, "history": []}
        save_data()
        bot.send_message(
            message.chat.id,
            "üîÑ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!",
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ reset_counter: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìà –ì—Ä–∞—Ñ–∏–∫ –∑–∞ –Ω–µ–¥–µ–ª—é")
def send_week_plot(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        plot = generate_week_plot(message.chat.id)
        if plot:
            bot.send_photo(
                message.chat.id,
                plot,
                caption="üìà –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é",
                reply_markup=create_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
                reply_markup=create_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_week_plot: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "ü•ß –¢–æ–ø –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
def send_pie_chart(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã"""
    try:
        chart = generate_pie_chart(message.chat.id)
        if chart:
            bot.send_photo(
                message.chat.id,
                chart,
                caption="ü•ß –¢–æ–ø –ø–æ—Ç—Ä–µ–±–ª—è–µ–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
                reply_markup=create_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞",
                reply_markup=create_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_pie_chart: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
def add_new_product(message):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ:–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å_–Ω–∞_100–≥\n"
            "–ü—Ä–∏–º–µ—Ä: –ë–∞–Ω–∞–Ω:95",
            reply_markup=back_to_menu_keyboard()
        )
        bot.register_next_step_handler(msg, process_add_product)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_new_product: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=create_keyboard())
@bot.message_handler(func=lambda m: m.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def main_menu(message):
    try:
        bot.send_message(
            message.chat.id,
            "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in main_menu: {e}")
def process_add_product(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        if message.text.lower() in ["–º–µ–Ω—é", "–Ω–∞–∑–∞–¥", "üè† –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]:
            return start(message)
            
        name, kcal = message.text.split(":")
        name = name.strip().lower()
        kcal = int(kcal.strip())
        
        if name in products:
            confirm_markup = ReplyKeyboardMarkup(resize_keyboard=True)
            confirm_markup.add("–î–∞", "–ù–µ—Ç", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            msg = bot.send_message(
                message.chat.id,
                f"‚ö†Ô∏è –ü—Ä–æ–¥—É–∫—Ç '{name}' —É–∂–µ –µ—Å—Ç—å!\n"
                f"–¢–µ–∫—É—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {products[name]} –∫–∫–∞–ª\n"
                "–ó–∞–º–µ–Ω–∏—Ç—å? (–î–∞/–ù–µ—Ç)",
                reply_markup=confirm_markup
            )
            bot.register_next_step_handler(msg, lambda m: confirm_replace(m, name, kcal))
        else:
            products[name] = kcal
            save_data()
            bot.send_message(
                message.chat.id,
                f"‚úÖ '{name}' ({kcal} –∫–∫–∞–ª/100–≥) –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=create_keyboard()
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ:–∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å",
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_add_product: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=create_keyboard())

def confirm_replace(message, name, kcal):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        if message.text.lower() == "–¥–∞":
            products[name] = kcal
            save_data()
            bot.send_message(
                message.chat.id,
                f"‚úÖ '{name}' –æ–±–Ω–æ–≤–ª—ë–Ω! –ù–æ–≤–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {kcal} –∫–∫–∞–ª/100–≥",
                reply_markup=create_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                reply_markup=create_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_replace: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
def remove_product_start(message):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        if not products:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç", reply_markup=create_keyboard())
            return
            
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        for product in products.keys():
            markup.add(product)
        markup.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        msg = bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_remove_product)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ remove_product_start: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞", reply_markup=create_keyboard())

def process_remove_product(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        product = message.text
        if product == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            return start(message)
            
        if product in products:
            del products[product]
            save_data()
            bot.send_message(
                message.chat.id,
                f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç '{product}' —É–¥–∞–ª—ë–Ω!",
                reply_markup=create_keyboard()
            )
        else:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=create_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_remove_product: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "üìú –ò—Å—Ç–æ—Ä–∏—è")
def show_history(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è"""
    try:
        user_id = str(message.chat.id)
        history = user_data.get(user_id, {}).get("history", [])
        
        if not history:
            bot.send_message(
                message.chat.id,
                "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞",
                reply_markup=create_keyboard()
            )
            return
            
        response = "üìú –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è:\n\n"
        for entry in history[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
            response += (
                f"üìÖ {entry['date']}\n"
                f"üçè {entry['product']}: {entry['amount']}–≥ ({entry['calories']} –∫–∫–∞–ª)\n\n"
            )
        
        bot.send_message(
            message.chat.id,
            response,
            reply_markup=create_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_history: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏", reply_markup=create_keyboard())

@bot.message_handler(func=lambda m: m.text == "‚ùì –ü–æ–º–æ—â—å")
def show_help(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üçé –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É –∫–∞–ª–æ—Ä–∏–π:\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –≥—Ä–∞–º–º–∞—Ö\n"
        "2. –î–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–¥—É–∫—Ç—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
        "3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫–∏\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üìä –ò—Ç–æ–≥ - –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π\n"
        "üîÑ –°–±—Ä–æ—Å–∏—Ç—å - –æ–±–Ω—É–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "üìà –ì—Ä–∞—Ñ–∏–∫ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "ü•ß –¢–æ–ø - —Å–∞–º—ã–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "üìú –ò—Å—Ç–æ—Ä–∏—è - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start"
    )
    bot.send_message(
        message.chat.id,
        help_text,
        reply_markup=create_keyboard()
    )

# ==================== –í–ï–ë–•–£–ö –ò –ó–ê–ü–£–°–ö ====================
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –æ—Ç Telegram"""
    if request.method == "POST":
        try:
            json_data = request.get_json()
            logger.info(f"Received update: {json_data}")
            if not json_data:
                logger.error("Empty update received")
                return "empty update", 400
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return "ok", 200
        except Exception as e:
            logger.error(f"Webhook error: {str(e)}")
            return "error", 500

@app.route('/')
def home():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram"

def setup_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ —Å –ø–æ–≤—Ç–æ—Ä–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
    webhook_url = 'https://telegram-bot-render-h7b5.onrender.com/webhook'
    max_retries = 3
    retry_delay = 5
    
    for attempt in range(max_retries):
        try:
            bot.remove_webhook()
            time.sleep(retry_delay)
            bot.set_webhook(url=webhook_url)
            webhook_info = bot.get_webhook_info()
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_info}")
            return True
        except Exception as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt+1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            time.sleep(retry_delay)
    
    return False

if __name__ == '__main__':
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.remove_webhook()
    time.sleep(1)
    webhook_url = 'https://telegram-bot-render-h7b5.onrender.com/webhook'
    try:
        bot.set_webhook(url=webhook_url)
        logger.info(f"Webhook set to: {webhook_url}")
        logger.info(f"Current webhook info: {bot.get_webhook_info()}")
    except Exception as e:
        logger.error(f"Failed to set webhook: {e}")
    if setup_webhook():
        port = int(os.getenv('PORT', 10000))
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        app.run(host='0.0.0.0', port=port)
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")